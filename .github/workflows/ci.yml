name: CI/CD Pipeline

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 23.x]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run linter
        run: pnpm run lint || echo "Linting failed but continuing..."

      - name: Run tests
        run: pnpm test

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm run build --if-present

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Copy files to artifacts
        run: |
          cp -r src/ artifacts/
          cp package.json artifacts/
          cp pnpm-lock.yaml artifacts/ || true
          cp -r scripts/ artifacts/ || true
          cp Dockerfile artifacts/ || true
          cp docker-compose.yml artifacts/ || true
          cp .env.dev artifacts/ || true
          cp .env.prod artifacts/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: app-artifacts
          path: artifacts/

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-artifacts
          path: ./

      - name: Set up SSH
        if: env.SSH_PRIVATE_KEY != ''
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        if: env.SSH_PRIVATE_KEY != ''
        run: |
          echo "Deploying to server..."
          # Здесь будут команды для деплоя на сервер
          # Например:
          # scp -r ./* user@your-server:/path/to/deployment
          # ssh user@your-server 'cd /path/to/deployment && ./scripts/deploy.sh'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Skip deployment
        if: env.SSH_PRIVATE_KEY == ''
        run: echo "Skipping deployment because SSH_PRIVATE_KEY is not set"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
