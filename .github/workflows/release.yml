name: Create Release

on:
  #
  # Starts when merging PR into master
  #
  pull_request:
    types: [closed]
    branches: [ master ]
  
  # Manual trigger from GitHub
  workflow_dispatch:

jobs:
  # Workflow for PR merge event
  pr_workflow:
    name: PR Workflow
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: echo "PR was merged, proceeding with release"

  # Workflow for manual trigger
  manual_workflow:
    name: Manual Workflow
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Workflow was triggered manually, proceeding with release"

  # Run tests
  test:
    name: Test
    needs: [pr_workflow, manual_workflow]
    if: always() && (needs.pr_workflow.result == 'success' || needs.manual_workflow.result == 'success')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

  # Create release on GitHub
  release:
    name: Create Release
    needs: [test]
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Get package version
        id: package_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            # If no tags exist, get all commits
            CHANGELOG=$(git log --pretty=format:"* %s (%an)" --reverse)
          else
            # Get commits since the latest tag
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"* %s (%an)" --reverse)
          fi
          
          # Escape newlines for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.VERSION }}
          name: Release v${{ steps.package_version.outputs.VERSION }}
          body: |
            # Changelog
            
            ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in package.json
        run: |
          NEW_VERSION=$(node -e "
            const pkg = require('./package.json');
            const [major, minor, patch] = pkg.version.split('.');
            pkg.version = \`\${major}.\${minor}.\${parseInt(patch) + 1}\`;
            console.log(pkg.version);
          ")
          
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            const [major, minor, patch] = pkg.version.split('.');
            pkg.version = \`\${major}.\${minor}.\${parseInt(patch) + 1}\`;
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          echo "Updated version to $NEW_VERSION"

      - name: Commit version bump
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: bump version for next development cycle"
          branch: dev
          file_pattern: package.json
